; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "СКЗИ ГранитК"
#define MyAppVersion "1.4"
#define MyAppPublisher "Госказначейство ЛНР"
#define MyAppURL "http://kaznalnr.ru"
#define CRKAppName "ЦРК"
#define CRKAppExeName "KeyDistributionCenter.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{F8D746AD-A794-4F5E-8E7E-81BC28751F24}
AppName={#CRKAppName} {#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\GranitK
DefaultGroupName=ГранитК
DisableWelcomePage=no
OutputDir=.
OutputBaseFilename=CRK_setup
;Password=1
Compression=lzma
LicenseFile=.\InstallerFiles\license.rtf
;Compression=lzma2/ultra
SolidCompression=yes
SetupIconFile=.\CRK\Image\app.ico
WizardImageFile=.\InstallerFiles\WizardImage.bmp
WizardSmallImageFile=.\InstallerFiles\WizardImageSmall.bmp

[Languages]
Name: "russian"; MessagesFile: "compiler:Languages\Russian.isl"

[Messages]
WelcomeLabel2=Программа установит [name/ver] на ваш компьютер.%n%nРекомендуется закрыть все прочие приложения перед тем, как продолжить.%n%nЕсли на компьютере уже есть установленные пакеты Microsoft Visual C++ 2013 Redist, Microsoft Visual C++ 2015 Redist и СУБД PostgreSQL 10, корректность установки не гарантируется.%n%nВ случае возникновения ошибок обратитесь к разработчику.

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: checkedonce

[Types]
Name: "Crk"; Description: "Развертывание ЦРК"; Flags: iscustom

[Components]
Name: "Crk"; Description: "Центр регистрации ключей"; Types: Crk; Flags: fixed

[Files]
; Сопутствующие файлы
Source: ".\InstallerFiles\vcredist_x86_2013.exe"; DestDir: {tmp}; Components: Crk; Flags: deleteafterinstall; Check:CheckVCRed2013; AfterInstall: InstallVCRed2013;
Source: ".\InstallerFiles\vcredist_x86_2015.exe"; DestDir: {tmp}; Components: Crk; Flags: deleteafterinstall; Check:CheckVCRed2015; AfterInstall: InstallVCRed2015;
Source: ".\InstallerFiles\postgresql-10.6-1-windows.exe"; DestDir: {tmp}; Components: Crk; Flags: deleteafterinstall; Check:CheckPostgress; AfterInstall: InstallPostgress;


; Файлы ЦРК
Source: ".\CRK\*"; DestDir: "{app}\CRK"; Components: Crk; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ".\CRK\Certificates\*"; DestDir: "{app}\CRK\Certificates"; Components: Crk; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ".\CRK\iconengines\*"; DestDir: "{app}\CRK\iconengines"; Components: Crk; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ".\CRK\Image\*"; DestDir: "{app}\CRK\Image"; Components: Crk; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ".\CRK\imageformats\*"; DestDir: "{app}\CRK\imageformats"; Components: Crk; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ".\CRK\platforms\*"; DestDir: "{app}\CRK\platforms"; Components: Crk; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ".\CRK\sqldrivers\*"; DestDir: "{app}\CRK\sqldrivers"; Components: Crk; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ".\CRK\styles\*"; DestDir: "{app}\CRK\styles"; Components: Crk; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ".\CRK\translations\*"; DestDir: "{app}\CRK\translations"; Components: Crk; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ".\CRK\UserCertificates"; DestDir: "{app}\CRK"; Components: Crk; Flags: ignoreversion recursesubdirs createallsubdirs

[Icons]
Name: "{group}\ {#CRKAppName}"; Filename: "{app}\CRK\{#CRKAppExeName}"; IconFilename: "{app}\CRK\Image\app.ico"; Components: Crk 
Name: "{group}\Удаление {#CRKAppName} {#MyAppName}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#CRKAppName}"; Filename: "{app}\CRK\{#CRKAppExeName}"; IconFilename: "{app}\CRK\Image\app.ico"; Components: Crk;  Tasks: desktopicon

[Code]
#IFDEF UNICODE
  #DEFINE AW "W"
#ELSE
  #DEFINE AW "A"
#ENDIF


const
  { Visual C++ 2013 Redistributable 12.0.21005 }
  VC_2013_REDIST_X86_MIN = '{13A4EE12-23EA-3371-91EE-EFB36DDFFF3E}';
  VC_2013_REDIST_X64_MIN = '{A749D8E6-B613-3BE3-8F5F-045C84EBA29B}';

  VC_2013_REDIST_X86_ADD = '{F8CFEB22-A2E7-3971-9EDA-4B11EDEFC185}';
  VC_2013_REDIST_X64_ADD = '{929FBD26-9020-399B-9A7A-751D61F0B942}';

  { Visual C++ 2015 Redistributable 14.0.24123 }
  VC_2015_REDIST_X86_MIN = '{06AE3BCC-7612-39D3-9F3B-B6601D877D02}';
  VC_2015_REDIST_X64_MIN = '{FDBE9DB4-7A91-3A28-B27E-705EF7CFAE57}';

  VC_2015_REDIST_X86_ADD = '{03AC7A79-F8AF-38FC-9DA0-98DAB4F4B1CD}';
  VC_2015_REDIST_X64_ADD = '{21134089-9B59-34C8-BE11-929D26AD5207}';

  { Visual C++ 2015 Redistributable 14.0.24210 }
  VC_2015_REDIST1_X86 = '{206898CC-4B41-4D98-AC28-9F9AE57F91FE}';
  VC_2015_REDIST1_X64 = '{2CBCEDBB-F38C-48A3-A3E1-6C6FD821A7F4}';

  { Visual C++ 2015 Redistributable 14.0.24210 }
  VC_2015_REDIST_X86 = '{8FD71E98-EE44-3844-9DAD-9CB0BBBC603C}';
  VC_2015_REDIST_X64 = '{C0B2C673-ECAA-372D-94E5-E89440D087AD}';

  { Visual C++ 2017 Redistributable 14.15.26706 }
  VC_2017_REDIST_X86_MIN = '{39E15475-23F2-345D-8977-B5DC47A94E26}';
  VC_2017_REDIST_X64_MIN = '{C77195A4-CEB8-38EE-BDD6-C46CB459EF6E}';

  VC_2017_REDIST_X86_ADD = '{2757496A-3E74-320A-B007-36120A9F126D}';
  VC_2017_REDIST_X64_ADD = '{F106B700-BFF8-3065-B305-14D36AD40539}';

function MsiQueryProductState(szProduct: string): Longint; 
  external 'MsiQueryProductState{#AW}@msi.dll stdcall';

function VCInstalled(const ProductID: string): Boolean;
begin
  Result := MsiQueryProductState(ProductID) = 5;
end;

procedure ExitProcess(exitCode:integer);
  external 'ExitProcess@kernel32.dll stdcall';

procedure ExitInstall(exitCode:integer);
begin
  DelTree(ExpandConstant('{app}'), True, True, True);
  ExitProcess(exitCode);
end;

function CheckVCRed2013(): Boolean;
begin
  Result:= 
  not(VCInstalled(VC_2013_REDIST_X86_MIN) or VCInstalled(VC_2013_REDIST_X64_MIN)
   or VCInstalled(VC_2013_REDIST_X86_ADD) or VCInstalled(VC_2013_REDIST_X64_ADD));
end;

procedure InstallVCRed2013();
var
  ErrorCode: Integer;
begin
  MsgBox('Для корректной работы программы будет установлен пакет Microsoft Visual C++ 2013 Redistributable.',mbInformation,MB_OK);
    if (not ShellExec('', ExpandConstant('{tmp}\vcredist_x86_2013.exe'),
     '/install', '', SW_SHOW, ewWaitUntilTerminated, ErrorCode)) and (ErrorCode<>0) and (ErrorCode<>1602) then
  begin
    MsgBox('Установка завершилась с ошибкой '+IntToStr(ErrorCode),mbError,MB_OK);
    ExitInstall(ErrorCode);
  end;
  if ErrorCode=1602 then
  begin
    MsgBox('Установка отменена пользователем. Дальнейшая установка прекращена.',mbInformation,MB_OK);
    ExitInstall(ErrorCode);
  end;
end;

function CheckVCRed2015(): Boolean;
begin
  Result:= 
  not(VCInstalled(VC_2015_REDIST_X86_MIN) or VCInstalled(VC_2015_REDIST_X64_MIN)
   or VCInstalled(VC_2015_REDIST_X86_ADD) or VCInstalled(VC_2015_REDIST_X64_ADD)
   or VCInstalled(VC_2015_REDIST1_X86) or VCInstalled(VC_2015_REDIST1_X64)
   or VCInstalled(VC_2015_REDIST_X86) or VCInstalled(VC_2015_REDIST_X64)
   or VCInstalled(VC_2017_REDIST_X86_MIN) or VCInstalled(VC_2017_REDIST_X64_MIN)
   or VCInstalled(VC_2017_REDIST_X86_ADD) or VCInstalled(VC_2017_REDIST_X64_ADD));
end;

procedure InstallVCRed2015();
var
  ErrorCode: Integer;
begin
  MsgBox('Для корректной работы программы будет установлен пакет Microsoft Visual C++ 2015 Redistributable.',mbInformation,MB_OK);
  if (not ShellExec('', ExpandConstant('{tmp}\vcredist_x86_2015.exe'),
     '/install', '', SW_SHOW, ewWaitUntilTerminated, ErrorCode)) and (ErrorCode<>0) and (ErrorCode<>1602) then
  begin
    MsgBox('Установка завершилась с ошибкой '+IntToStr(ErrorCode),mbError,MB_OK);
    ExitInstall(ErrorCode);
  end;
  if ErrorCode=1602 then
  begin
    MsgBox('Установка отменена пользователем. Дальнейшая установка прекращена.',mbInformation,MB_OK);
    ExitInstall(ErrorCode);
  end;
end;

function CheckPostgress(): Boolean;
begin
  if (FileExists(ExpandConstant('{pf}\PostgreSQL\10\bin\postgres.exe'))) then
  begin
    Result:=false;
  end
  else
  begin
    Result:=true;
  end;
end;

procedure InstallPostgress();
var
  ErrorCode: Integer;
begin
  MsgBox('Для корректной работы программы будет установлена СУБД PostgreSQL 10.',mbInformation,MB_OK);
  if (not ShellExec('', ExpandConstant('{tmp}\postgresql-10.6-1-windows.exe'),
     ' --install_runtimes 0 ', '', SW_SHOW, ewWaitUntilTerminated, ErrorCode)) and (ErrorCode<>0) and (ErrorCode<>1) then
  begin
    MsgBox('Установка завершилась с ошибкой '+IntToStr(ErrorCode),mbError,MB_OK);
    ExitInstall(ErrorCode);
  end;
    
  if ErrorCode=1 then
  begin
    MsgBox('Установка отменена пользователем. Дальнейшая установка прекращена.',mbInformation,MB_OK);
    ExitInstall(ErrorCode);
  end;
end;

function SetFocus(hWnd: HWND): HWND;
  external 'SetFocus@user32.dll stdcall';
function OpenClipboard(hWndNewOwner: HWND): BOOL;
  external 'OpenClipboard@user32.dll stdcall';
function GetClipboardData(uFormat: UINT): THandle;
  external 'GetClipboardData@user32.dll stdcall';
function CloseClipboard: BOOL;
  external 'CloseClipboard@user32.dll stdcall';
function GlobalLock(hMem: THandle): PAnsiChar;
  external 'GlobalLock@kernel32.dll stdcall';
function GlobalUnlock(hMem: THandle): BOOL;
  external 'GlobalUnlock@kernel32.dll stdcall';

var
  SerialPage: TWizardPage;
  SerialEdits: array of TEdit;

const
  CF_TEXT = 1;
  VK_BACK = 8;
  SC_EDITCOUNT = 5;
  SC_CHARCOUNT = 10;
  SC_DELIMITER = '-';

function GetClipboardText: string;
var
  Data: THandle;
begin
  Result := '';
  if OpenClipboard(0) then
  try
    Data := GetClipboardData(CF_TEXT);
    if Data <> 0 then
      Result := String(GlobalLock(Data));
  finally
    if Data <> 0 then
      GlobalUnlock(Data);
    CloseClipboard;
  end;
end;

function GetSerialNumber(ADelimiter: Char): string;
var
  I: Integer;
begin
  Result := '';
  for I := 0 to GetArrayLength(SerialEdits) - 1 do
    Result := Result + SerialEdits[I].Text + ADelimiter;
  Delete(Result, Length(Result), 1);
end;

function IsValidInput: Boolean;
var
  I: Integer;
begin
  Result:=True;
  for I := 0 to GetArrayLength(SerialEdits) - 1 do
    if Length(SerialEdits[I].Text) < SC_CHARCOUNT then
    begin
      Result := False;
      Break;
    end;
  Result :=  GetSerialNumber(SC_DELIMITER) = '1111111111-1111111111-1111111111-1111111111-1111111111'
  end;

function TrySetSerialNumber(const ASerialNumber: string; ADelimiter: Char): Boolean;
var
  I: Integer;
  J: Integer;
begin
  Result := False;

  if Length(ASerialNumber) = ((SC_EDITCOUNT * SC_CHARCOUNT) + (SC_EDITCOUNT - 1)) then
  begin
    for I := 1 to SC_EDITCOUNT - 1 do
      if ASerialNumber[(I * SC_CHARCOUNT) + I] <> ADelimiter then
        Exit;

    for I := 0 to GetArrayLength(SerialEdits) - 1 do
    begin
      J := (I * SC_CHARCOUNT) + I + 1;
      SerialEdits[I].Text := Copy(ASerialNumber, J, SC_CHARCOUNT);
    end;

    Result := True;
  end;
end;

function TryPasteSerialNumber: Boolean;
begin
  Result := TrySetSerialNumber(GetClipboardText, SC_DELIMITER);
end;

procedure OnSerialEditChange(Sender: TObject);
begin
  WizardForm.NextButton.Enabled := IsValidInput;
end;

procedure OnSerialEditKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var
  Edit: TEdit;
  EditIndex: Integer;
begin
  Edit := TEdit(Sender);
  EditIndex := Edit.TabOrder - SerialEdits[0].TabOrder;
  if (EditIndex = 0) and (Key = Ord('V')) and (Shift = [ssCtrl]) then
  begin
    if TryPasteSerialNumber then
      Key := 0;
  end
  else
  if (Key >= 32) and (Key <= 255) then
  begin
    if Length(Edit.Text) = SC_CHARCOUNT - 1 then
    begin
      if EditIndex < GetArrayLength(SerialEdits) - 1 then
        SetFocus(SerialEdits[EditIndex + 1].Handle)
      else
        SetFocus(WizardForm.NextButton.Handle);
    end;
  end
  else
  if Key = VK_BACK then
    if (EditIndex > 0) and (Edit.Text = '') and (Edit.SelStart = 0) then
      SetFocus(SerialEdits[EditIndex - 1].Handle);
end;

procedure CreateSerialNumberPage;
var
  I: Integer;
  Edit: TEdit;
  DescLabel: TLabel;
  EditWidth: Integer;
begin
  SerialPage := CreateCustomPage(wpLicense, 'Проверка серийного номера',
    'Введите серийный номер продукта');

  DescLabel := TLabel.Create(SerialPage);
  DescLabel.Top := 16;
  DescLabel.Left := 0;
  DescLabel.Parent := SerialPage.Surface;
  DescLabel.Caption := 'Серийный номер:';
  DescLabel.Font.Style := [fsBold];

  SetArrayLength(SerialEdits, SC_EDITCOUNT);
  EditWidth := (SerialPage.SurfaceWidth - ((SC_EDITCOUNT - 1) * 8)) div SC_EDITCOUNT;

  for I := 0 to SC_EDITCOUNT - 1 do
  begin
    Edit := TEdit.Create(SerialPage);
    Edit.Top := 40;
    Edit.Left := I * (EditWidth + 8);
    Edit.Width := EditWidth;
    Edit.CharCase := ecUpperCase;
    Edit.MaxLength := SC_CHARCOUNT;
    Edit.Parent := SerialPage.Surface;
    Edit.OnChange := @OnSerialEditChange;
    Edit.OnKeyDown := @OnSerialEditKeyDown;
    SerialEdits[I] := Edit;
  end;
end;

procedure CurPageChanged(CurPageID: Integer);
begin
  if CurPageID = SerialPage.ID then
    WizardForm.NextButton.Enabled := IsValidInput;  
end;


procedure InitializeWizard;
begin
  CreateSerialNumberPage;
end;

function IsWindowsVersionOrNewer(Major, Minor: Integer): Boolean;
var
  Version: TWindowsVersion;
begin
  GetWindowsVersionEx(Version);
  Result :=
    (Version.Major > Major) or
    ((Version.Major = Major) and (Version.Minor >= Minor));
end;



function InitializeSetup: Boolean;
begin
  if not IsWindowsVersionOrNewer(6, 1) then
  begin 
    MsgBox(
      'Для установки приложения необходима ОС Windows 7 или более поздняя версия',
      mbCriticalError, MB_OK);
    Result:=False;
    Exit;
  end;
  Result:=True;
end;
