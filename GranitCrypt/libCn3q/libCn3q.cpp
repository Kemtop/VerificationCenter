#include "libCn3q.h"

libCn3q::libCn3q()
{
	TpPoint = 0;
	doVal = 0;
	getNoStatic = false;
}

//---------------------------------------------------------------------------
#include "libCn3q.h"
//---------------------------------------------------------------------------

// Matrix A for MixColumns (L) function
const  unsigned long long libCn3q::A[64] = {
	0x8e20faa72ba0b470, 0x47107ddd9b505a38, 0xad08b0e0c3282d1c, 0xd8045870ef14980e,
	0x6c022c38f90a4c07, 0x3601161cf205268d, 0x1b8e0b0e798c13c8, 0x83478b07b2468764,
	0xa011d380818e8f40, 0x5086e740ce47c920, 0x2843fd2067adea10, 0x14aff010bdd87508,
	0x0ad97808d06cb404, 0x05e23c0468365a02, 0x8c711e02341b2d01, 0x46b60f011a83988e,
	0x90dab52a387ae76f, 0x486dd4151c3dfdb9, 0x24b86a840e90f0d2, 0x125c354207487869,
	0x092e94218d243cba, 0x8a174a9ec8121e5d, 0x4585254f64090fa0, 0xaccc9ca9328a8950,
	0x9d4df05d5f661451, 0xc0a878a0a1330aa6, 0x60543c50de970553, 0x302a1e286fc58ca7,
	0x18150f14b9ec46dd, 0x0c84890ad27623e0, 0x0642ca05693b9f70, 0x0321658cba93c138,
	0x86275df09ce8aaa8, 0x439da0784e745554, 0xafc0503c273aa42a, 0xd960281e9d1d5215,
	0xe230140fc0802984, 0x71180a8960409a42, 0xb60c05ca30204d21, 0x5b068c651810a89e,
	0x456c34887a3805b9, 0xac361a443d1c8cd2, 0x561b0d22900e4669, 0x2b838811480723ba,
	0x9bcf4486248d9f5d, 0xc3e9224312c8c1a0, 0xeffa11af0964ee50, 0xf97d86d98a327728,
	0xe4fa2054a80b329c, 0x727d102a548b194e, 0x39b008152acb8227, 0x9258048415eb419d,
	0x492c024284fbaec0, 0xaa16012142f35760, 0x550b8e9e21f7a530, 0xa48b474f9ef5dc18,
	0x70a6a56e2440598e, 0x3853dc371220a247, 0x1ca76e95091051ad, 0x0edd37c48a08a6d8,
	0x07e095624504536c, 0x8d70c431ac02a736, 0xc83862965601dd1b, 0x641c314b2b8ee083
};

// Substitution for SubBytes function
const unsigned char libCn3q::Sbox[256] = {
	0xFC, 0xEE, 0xDD, 0x11, 0xCF, 0x6E, 0x31, 0x16, 0xFB, 0xC4, 0xFA, 0xDA, 0x23, 0xC5, 0x04, 0x4D,
	0xE9, 0x77, 0xF0, 0xDB, 0x93, 0x2E, 0x99, 0xBA, 0x17, 0x36, 0xF1, 0xBB, 0x14, 0xCD, 0x5F, 0xC1,
	0xF9, 0x18, 0x65, 0x5A, 0xE2, 0x5C, 0xEF, 0x21, 0x81, 0x1C, 0x3C, 0x42, 0x8B, 0x01, 0x8E, 0x4F,
	0x05, 0x84, 0x02, 0xAE, 0xE3, 0x6A, 0x8F, 0xA0, 0x06, 0x0B, 0xED, 0x98, 0x7F, 0xD4, 0xD3, 0x1F,
	0xEB, 0x34, 0x2C, 0x51, 0xEA, 0xC8, 0x48, 0xAB, 0xF2, 0x2A, 0x68, 0xA2, 0xFD, 0x3A, 0xCE, 0xCC,
	0xB5, 0x70, 0x0E, 0x56, 0x08, 0x0C, 0x76, 0x12, 0xBF, 0x72, 0x13, 0x47, 0x9C, 0xB7, 0x5D, 0x87,
	0x15, 0xA1, 0x96, 0x29, 0x10, 0x7B, 0x9A, 0xC7, 0xF3, 0x91, 0x78, 0x6F, 0x9D, 0x9E, 0xB2, 0xB1,
	0x32, 0x75, 0x19, 0x3D, 0xFF, 0x35, 0x8A, 0x7E, 0x6D, 0x54, 0xC6, 0x80, 0xC3, 0xBD, 0x0D, 0x57,
	0xDF, 0xF5, 0x24, 0xA9, 0x3E, 0xA8, 0x43, 0xC9, 0xD7, 0x79, 0xD6, 0xF6, 0x7C, 0x22, 0xB9, 0x03,
	0xE0, 0x0F, 0xEC, 0xDE, 0x7A, 0x94, 0xB0, 0xBC, 0xDC, 0xE8, 0x28, 0x50, 0x4E, 0x33, 0x0A, 0x4A,
	0xA7, 0x97, 0x60, 0x73, 0x1E, 0x00, 0x62, 0x44, 0x1A, 0xB8, 0x38, 0x82, 0x64, 0x9F, 0x26, 0x41,
	0xAD, 0x45, 0x46, 0x92, 0x27, 0x5E, 0x55, 0x2F, 0x8C, 0xA3, 0xA5, 0x7D, 0x69, 0xD5, 0x95, 0x3B,
	0x07, 0x58, 0xB3, 0x40, 0x86, 0xAC, 0x1D, 0xF7, 0x30, 0x37, 0x6B, 0xE4, 0x88, 0xD9, 0xE7, 0x89,
	0xE1, 0x1B, 0x83, 0x49, 0x4C, 0x3F, 0xF8, 0xFE, 0x8D, 0x53, 0xAA, 0x90, 0xCA, 0xD8, 0x85, 0x61,
	0x20, 0x71, 0x67, 0xA4, 0x2D, 0x2B, 0x09, 0x5B, 0xCB, 0x9B, 0x25, 0xD0, 0xBE, 0xE5, 0x6C, 0x52,
	0x59, 0xA6, 0x74, 0xD2, 0xE6, 0xF4, 0xB4, 0xC0, 0xD1, 0x66, 0xAF, 0xC2, 0x39, 0x4B, 0x63, 0xB6
};

// Substitution for Transposition (P) function
const unsigned char libCn3q::Tau[64] = {
	0,  8, 16, 24, 32, 40, 48, 56,
	1,  9, 17, 25, 33, 41, 49, 57,
	2, 10, 18, 26, 34, 42, 50, 58,
	3, 11, 19, 27, 35, 43, 51, 59,
	4, 12, 20, 28, 36, 44, 52, 60,
	5, 13, 21, 29, 37, 45, 53, 61,
	6, 14, 22, 30, 38, 46, 54, 62,
	7, 15, 23, 31, 39, 47, 55, 63
};

// Constant values for KeySchedule function
unsigned char libCn3q::C[12][64] = {
	{
		0xb1,0x08,0x5b,0xda,0x1e,0xca,0xda,0xe9,0xeb,0xcb,0x2f,0x81,0xc0,0x65,0x7c,0x1f,
		0x2f,0x6a,0x76,0x43,0x2e,0x45,0xd0,0x16,0x71,0x4e,0xb8,0x8d,0x75,0x85,0xc4,0xfc,
		0x4b,0x7c,0xe0,0x91,0x92,0x67,0x69,0x01,0xa2,0x42,0x2a,0x08,0xa4,0x60,0xd3,0x15,
		0x05,0x76,0x74,0x36,0xcc,0x74,0x4d,0x23,0xdd,0x80,0x65,0x59,0xf2,0xa6,0x45,0x07
	},
	{
		0x6f,0xa3,0xb5,0x8a,0xa9,0x9d,0x2f,0x1a,0x4f,0xe3,0x9d,0x46,0x0f,0x70,0xb5,0xd7,
		0xf3,0xfe,0xea,0x72,0x0a,0x23,0x2b,0x98,0x61,0xd5,0x5e,0x0f,0x16,0xb5,0x01,0x31,
		0x9a,0xb5,0x17,0x6b,0x12,0xd6,0x99,0x58,0x5c,0xb5,0x61,0xc2,0xdb,0x0a,0xa7,0xca,
		0x55,0xdd,0xa2,0x1b,0xd7,0xcb,0xcd,0x56,0xe6,0x79,0x04,0x70,0x21,0xb1,0x9b,0xb7
	},
	{
		0xf5,0x74,0xdc,0xac,0x2b,0xce,0x2f,0xc7,0x0a,0x39,0xfc,0x28,0x6a,0x3d,0x84,0x35,
		0x06,0xf1,0x5e,0x5f,0x52,0x9c,0x1f,0x8b,0xf2,0xea,0x75,0x14,0xb1,0x29,0x7b,0x7b,
		0xd3,0xe2,0x0f,0xe4,0x90,0x35,0x9e,0xb1,0xc1,0xc9,0x3a,0x37,0x60,0x62,0xdb,0x09,
		0xc2,0xb6,0xf4,0x43,0x86,0x7a,0xdb,0x31,0x99,0x1e,0x96,0xf5,0x0a,0xba,0x0a,0xb2
	},
	{
		0xef,0x1f,0xdf,0xb3,0xe8,0x15,0x66,0xd2,0xf9,0x48,0xe1,0xa0,0x5d,0x71,0xe4,0xdd,
		0x48,0x8e,0x85,0x7e,0x33,0x5c,0x3c,0x7d,0x9d,0x72,0x1c,0xad,0x68,0x5e,0x35,0x3f,
		0xa9,0xd7,0x2c,0x82,0xed,0x03,0xd6,0x75,0xd8,0xb7,0x13,0x33,0x93,0x52,0x03,0xbe,
		0x34,0x53,0xea,0xa1,0x93,0xe8,0x37,0xf1,0x22,0x0c,0xbe,0xbc,0x84,0xe3,0xd1,0x2e
	},
	{
		0x4b,0xea,0x6b,0xac,0xad,0x47,0x47,0x99,0x9a,0x3f,0x41,0x0c,0x6c,0xa9,0x23,0x63,
		0x7f,0x15,0x1c,0x1f,0x16,0x86,0x10,0x4a,0x35,0x9e,0x35,0xd7,0x80,0x0f,0xff,0xbd,
		0xbf,0xcd,0x17,0x47,0x25,0x3a,0xf5,0xa3,0xdf,0xff,0x00,0xb7,0x23,0x27,0x1a,0x16,
		0x7a,0x56,0xa2,0x7e,0xa9,0xea,0x63,0xf5,0x60,0x17,0x58,0xfd,0x7c,0x6c,0xfe,0x57
	},
	{
		0xae,0x4f,0xae,0xae,0x1d,0x3a,0xd3,0xd9,0x6f,0xa4,0xc3,0x3b,0x7a,0x30,0x39,0xc0,
		0x2d,0x66,0xc4,0xf9,0x51,0x42,0xa4,0x6c,0x18,0x7f,0x9a,0xb4,0x9a,0xf0,0x8e,0xc6,
		0xcf,0xfa,0xa6,0xb7,0x1c,0x9a,0xb7,0xb4,0x0a,0xf2,0x1f,0x66,0xc2,0xbe,0xc6,0xb6,
		0xbf,0x71,0xc5,0x72,0x36,0x90,0x4f,0x35,0xfa,0x68,0x40,0x7a,0x46,0x64,0x7d,0x6e
	},
	{
		0xf4,0xc7,0x0e,0x16,0xee,0xaa,0xc5,0xec,0x51,0xac,0x86,0xfe,0xbf,0x24,0x09,0x54,
		0x39,0x9e,0xc6,0xc7,0xe6,0xbf,0x87,0xc9,0xd3,0x47,0x3e,0x33,0x19,0x7a,0x93,0xc9,
		0x09,0x92,0xab,0xc5,0x2d,0x82,0x2c,0x37,0x06,0x47,0x69,0x83,0x28,0x4a,0x05,0x04,
		0x35,0x17,0x45,0x4c,0xa2,0x3c,0x4a,0xf3,0x88,0x86,0x56,0x4d,0x3a,0x14,0xd4,0x93
	},
	{
		0x9b,0x1f,0x5b,0x42,0x4d,0x93,0xc9,0xa7,0x03,0xe7,0xaa,0x02,0x0c,0x6e,0x41,0x41,
		0x4e,0xb7,0xf8,0x71,0x9c,0x36,0xde,0x1e,0x89,0xb4,0x44,0x3b,0x4d,0xdb,0xc4,0x9a,
		0xf4,0x89,0x2b,0xcb,0x92,0x9b,0x06,0x90,0x69,0xd1,0x8d,0x2b,0xd1,0xa5,0xc4,0x2f,
		0x36,0xac,0xc2,0x35,0x59,0x51,0xa8,0xd9,0xa4,0x7f,0x0d,0xd4,0xbf,0x02,0xe7,0x1e
	},
	{
		0x37,0x8f,0x5a,0x54,0x16,0x31,0x22,0x9b,0x94,0x4c,0x9a,0xd8,0xec,0x16,0x5f,0xde,
		0x3a,0x7d,0x3a,0x1b,0x25,0x89,0x42,0x24,0x3c,0xd9,0x55,0xb7,0xe0,0x0d,0x09,0x84,
		0x80,0x0a,0x44,0x0b,0xdb,0xb2,0xce,0xb1,0x7b,0x2b,0x8a,0x9a,0xa6,0x07,0x9c,0x54,
		0x0e,0x38,0xdc,0x92,0xcb,0x1f,0x2a,0x60,0x72,0x61,0x44,0x51,0x83,0x23,0x5a,0xdb
	},
	{
		0xab,0xbe,0xde,0xa6,0x80,0x05,0x6f,0x52,0x38,0x2a,0xe5,0x48,0xb2,0xe4,0xf3,0xf3,
		0x89,0x41,0xe7,0x1c,0xff,0x8a,0x78,0xdb,0x1f,0xff,0xe1,0x8a,0x1b,0x33,0x61,0x03,
		0x9f,0xe7,0x67,0x02,0xaf,0x69,0x33,0x4b,0x7a,0x1e,0x6c,0x30,0x3b,0x76,0x52,0xf4,
		0x36,0x98,0xfa,0xd1,0x15,0x3b,0xb6,0xc3,0x74,0xb4,0xc7,0xfb,0x98,0x45,0x9c,0xed
	},
	{
		0x7b,0xcd,0x9e,0xd0,0xef,0xc8,0x89,0xfb,0x30,0x02,0xc6,0xcd,0x63,0x5a,0xfe,0x94,
		0xd8,0xfa,0x6b,0xbb,0xeb,0xab,0x07,0x61,0x20,0x01,0x80,0x21,0x14,0x84,0x66,0x79,
		0x8a,0x1d,0x71,0xef,0xea,0x48,0xb9,0xca,0xef,0xba,0xcd,0x1d,0x7d,0x47,0x6e,0x98,
		0xde,0xa2,0x59,0x4a,0xc0,0x6f,0xd8,0x5d,0x6b,0xca,0xa4,0xcd,0x81,0xf3,0x2d,0x1b
	},
	{
		0x37,0x8e,0xe7,0x67,0xf1,0x16,0x31,0xba,0xd2,0x13,0x80,0xb0,0x04,0x49,0xb1,0x7a,
		0xcd,0xa4,0x3c,0x32,0xbc,0xdf,0x1d,0x77,0xf8,0x20,0x12,0xd4,0x30,0x21,0x9f,0x9b,
		0x5d,0x80,0xef,0x9d,0x18,0x91,0xcc,0x86,0xe7,0x1d,0xa4,0xaa,0x88,0xe1,0x28,0x52,
		0xfa,0xf4,0x17,0xd5,0xd9,0xb2,0x1b,0x99,0x48,0xbc,0x92,0x4a,0xf1,0x1b,0xd7,0x20
	}
};

//Константы для тестирования
//[0]-ГОСТ 34.11-2012 Приложение А Пример 1
//[1]-А.2 Пример 2
const unsigned char libCn3q::Message[TEST_VECTORS][MAX_MESSAGE_LENGTH] = {
	{
		0x32,0x31,0x30,0x39,0x38,0x37,0x36,0x35,0x34,0x33,0x32,0x31,0x30,0x39,0x38,0x37,
		0x36,0x35,0x34,0x33,0x32,0x31,0x30,0x39,0x38,0x37,0x36,0x35,0x34,0x33,0x32,0x31,
		0x30,0x39,0x38,0x37,0x36,0x35,0x34,0x33,0x32,0x31,0x30,0x39,0x38,0x37,0x36,0x35,
		0x34,0x33,0x32,0x31,0x30,0x39,0x38,0x37,0x36,0x35,0x34,0x33,0x32,0x31,0x30
	},
	{
		0xfb,0xe2,0xe5,0xf0,0xee,0xe3,0xc8,0x20,0xfb,0xea,0xfa,0xeb,0xef,0x20,0xff,0xfb,
		0xf0,0xe1,0xe0,0xf0,0xf5,0x20,0xe0,0xed,0x20,0xe8,0xec,0xe0,0xeb,0xe5,0xf0,0xf2,
		0xf1,0x20,0xff,0xf0,0xee,0xec,0x20,0xf1,0x20,0xfa,0xf2,0xfe,0xe5,0xe2,0x20,0x2c,
		0xe8,0xf6,0xf3,0xed,0xe2,0x20,0xe8,0xe6,0xee,0xe1,0xe8,0xf0,0xf2,0xd1,0x20,0x2c,
		0xe8,0xf0,0xf2,0xe5,0xe2,0x20,0xe5,0xd1
	},
};
//Хэш коды примеров из ГОСТ для функции хэширования с длиной хэш-кода 512
//[0]-ГОСТ 34.11-2012 Приложение А Пример 1
//[1]-А.2 Пример 2
const unsigned char libCn3q::Hash_512[TEST_VECTORS][64] = {
	{
		0x48,0x6f,0x64,0xc1,0x91,0x78,0x79,0x41,0x7f,0xef,0x08,0x2b,0x33,0x81,0xa4,0xe2,
		0x11,0xc3,0x24,0xf0,0x74,0x65,0x4c,0x38,0x82,0x3a,0x7b,0x76,0xf8,0x30,0xad,0x00,
		0xfa,0x1f,0xba,0xe4,0x2b,0x12,0x85,0xc0,0x35,0x2f,0x22,0x75,0x24,0xbc,0x9a,0xb1,
		0x62,0x54,0x28,0x8d,0xd6,0x86,0x3d,0xcc,0xd5,0xb9,0xf5,0x4a,0x1a,0xd0,0x54,0x1b
	},
	{
		0x28,0xfb,0xc9,0xba,0xda,0x03,0x3b,0x14,0x60,0x64,0x2b,0xdc,0xdd,0xb9,0x0c,0x3f,
		0xb3,0xe5,0x6c,0x49,0x7c,0xcd,0x0f,0x62,0xb8,0xa2,0xad,0x49,0x35,0xe8,0x5f,0x03,
		0x76,0x13,0x96,0x6d,0xe4,0xee,0x00,0x53,0x1a,0xe6,0x0f,0x3b,0x5a,0x47,0xf8,0xda,
		0xe0,0x69,0x15,0xd5,0xf2,0xf1,0x94,0x99,0x6f,0xca,0xbf,0x26,0x22,0xe6,0x88,0x1e
	},
};

//Хэш коды примеров из ГОСТ для функции хэширования с длиной хэш-кода 256
//[0]-ГОСТ 34.11-2012 Приложение А Пример 1
//[1]-А.2 Пример 2
const unsigned char libCn3q::Hash_256[TEST_VECTORS][32] = {
	{
		0x00,0x55,0x7b,0xe5,0xe5,0x84,0xfd,0x52,0xa4,0x49,0xb1,0x6b,0x02,0x51,0xd0,0x5d,
		0x27,0xf9,0x4a,0xb7,0x6c,0xba,0xa6,0xda,0x89,0x0b,0x59,0xd8,0xef,0x1e,0x15,0x9d
	},
	{
		0x50,0x8f,0x7e,0x55,0x3c,0x06,0x50,0x1d,0x74,0x9a,0x66,0xfc,0x28,0xc6,0xca,0xc0,
		0xb0,0x05,0x74,0x6d,0x97,0x53,0x7f,0xa8,0x5d,0x9e,0x40,0x90,0x4e,0xfe,0xd2,0x9d
	},
};

// Message length in bits
const  int libCn3q::MessageLength[TEST_VECTORS] = {
	504, 576
};



void libCn3q::AddModulo512(const unsigned char *a, const unsigned char *b, unsigned char *c)
{
	int i = 0, t = 0;

	for (i = 63;i >= 0;i--)
	{
		t = a[i] + b[i] + (t >> 8);
		c[i] = t & 0xFF;
	}
}


void libCn3q::AddXor512(const void *a, const void *b, void *c)
{
	int i = 0;
	const long long *A = (long long *)a, *B = (long long *)b;
	unsigned long long *C = (unsigned long long *)c;

	for (i = 0;i < 8;i++)
	{
		C[i] = A[i] ^ B[i];
	}
}

void libCn3q::S(unsigned char *state)
{
	int i = 0;

	for (i = 0;i < 64;i++)
	{
		state[i] = Sbox[state[i]];
	}
}

void libCn3q::L(unsigned char *state)
{
	unsigned long long v = 0;
	int i = 0, j = 0, k = 0;

	for (i = 0;i < 8;i++)
	{
		v = 0;
		for (k = 0;k < 8;k++)
		{
			for (j = 0;j < 8;j++)
			{
				if ((state[i * 8 + k] & (1 << (7 - j))) != 0)
					v ^= A[k * 8 + j];
			}
		}
		for (k = 0;k < 8;k++)
		{
			state[i * 8 + k] = (v & ((unsigned long long)0xFF << (7 - k) * 8)) >> (7 - k) * 8;
		}
	}
}

void libCn3q::P(unsigned char *state)
{
	int i = 0;
	unsigned char t[64] = {};

	for (i = 0;i < 64;i++)
	{
		t[i] = state[Tau[i]];
	}

	memcpy(state, t, 64);
}

void libCn3q::KeySchedule(unsigned char *K, int i)
{
	AddXor512(K, C[i], K);

	S(K);
	P(K);
	L(K);
}

void libCn3q::E(unsigned char *K, const unsigned char *m, unsigned char *state)
{
	int i = 0;

	memcpy(K, K, 64);

	AddXor512(m, K, state);

	for (i = 0;i < 12;i++)
	{
		S(state);
		P(state);
		L(state);
		KeySchedule(K, i);
		AddXor512(state, K, state);
	}
}

void libCn3q::g_N(const unsigned char *N, unsigned char *h, const unsigned char *m)
{
	unsigned char t[64], K[64];

	AddXor512(N, h, K);

	S(K);
	P(K);
	L(K);

	E(K, m, t);

	AddXor512(t, h, t);
	AddXor512(t, m, h);
}

void libCn3q::hash_X(unsigned char *IV, const unsigned char *message, unsigned long long length, unsigned char *out)
{
	unsigned char v512[64] = {
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00
	};
	unsigned char v0[64] = {
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	};
	unsigned char Sigma[64] = {
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	};
	unsigned char N[64] = {
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	};
	unsigned char m[64], *hash = IV;
	unsigned long long len = length;

	// Stage 2
	while (len >= 512)
	{
		//Копирую в m
		memcpy(m, message + len / 8 - 63 - ((len & 0x7) == 0), 64);

		g_N(N, hash, m);
		AddModulo512(N, v512, N);
		AddModulo512(Sigma, m, Sigma);
		len -= 512;
	}

	memset(m, 0, 64);
	memcpy(m + 63 - len / 8 + ((len & 0x7) == 0), message, len / 8 + 1 - ((len & 0x7) == 0));

	// Stage 3
	m[63 - len / 8] |= (1 << (len & 0x7));

	g_N(N, hash, m);
	v512[63] = len & 0xFF;
	v512[62] = len >> 8;
	AddModulo512(N, v512, N);

	AddModulo512(Sigma, m, Sigma);

	g_N(v0, hash, N);
	g_N(v0, hash, Sigma);

	memcpy(out, hash, 64);
}

void libCn3q::hash_512(const unsigned char *message, unsigned long long length, unsigned char *out)
{
	unsigned char IV[64] =
	{
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	};

	hash_X(IV, message, length, out);
}

void libCn3q::hash_256(const unsigned char *message, unsigned long long length, unsigned char *out)
{
	unsigned char IV[64] =
	{
		0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
		0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01
	};
	unsigned char hash[64];
	/*
	for (int i = 0;i < length/8;i++)
	{
	cout << message[i] << " ";
	}
	cout << endl;
	*/
	hash_X(IV, message, length, hash);

	memcpy(out, hash, 32);
}

string  libCn3q::self_testing()
{
	string ErrMess = "";

	unsigned char h512[64] = {}, h256[32] = {};
	int i = 0;


	for (i = 0;i < TEST_VECTORS;i++)
	{
		hash_512(Message[i], MessageLength[i], h512);

		if (memcmp(h512, Hash_512[i], sizeof(unsigned char) * 64))
		{
			ErrMess = "Ошибка тестирования: Функция хэширования с длиной хэш кода 512 \
			  вернула хэш код который не совпадает в контрольной константой.\
              Тестовая строка ";//+string::number(i) + ". Длина сообщения M=" + string::number(MessageLength[i]);
			return ErrMess;
		}

		hash_256(Message[i], MessageLength[i], h256);

		if (memcmp(h256, Hash_256[i], sizeof(unsigned char) * 32))
		{
			ErrMess = "Ошибка тестирования: Функция хэширования с длиной хэш кода 256 \
			  вернула хэш код который не совпадает в контрольной константой.\
              Тестовая строка ";//+QString::number(i) + ". Длина сообщения M=" + QString::number(MessageLength[i]);
			return ErrMess;
		}
	}

	return "";
}

int libCn3q::getArrA(unsigned int * arr)
{
	arr[0] = IMA_MAP_ANPOINT();
	arr[1] = IMA_MAP_CURV();
	arr[2] = IMA_MAP_EXIT();
	arr[3] = IMA_MAP_MUXFIRST();
	arr[4] = IMA_MAP_Z_FLAG(); //Вернет 25.
	arr[5] = IMA_MAP_X_FLAG();
	arr[6] = IMA_MAP_HANDLE_POINT();
	arr[7] = IMA_MAP_SLEW();
	arr[8] = IMA_MAP_GEAR_B();
	arr[9] = IMA_MAP_DIR_SIGMA();
	arr[10] = IMA_MAP_PPS();
	arr[11] = TTN_UPX_MASK();
	arr[12] = TTN_UPX_SHIFT();
	arr[13] = TTN_UPX_ANY();
	arr[14] = TTN_UPX_A1_SHIFT();
	arr[15] = TTN_UPX_ARP();
	arr[16] = TTN_UPX_ATTR();
	arr[17] = TTN_UPX_D_HA();
	arr[18] = TTN_UPX_PROPERTY();
	arr[19] = TTN_UPX_PIC();
	arr[20] = TTN_UPX_FREE();
	arr[21] = TTN_UPX_STR_A();
	arr[22] = TTN_UPX_STR_W();
	arr[23] = TTN_UPX_SPEC();
	arr[24] = TTN_UPX_USAGE();
	arr[25] = TTN_UPX_WARNING();
	arr[26] = TTN_UPX_BODY();
	arr[27] = TTN_UPX_OFSPACE();
	arr[28] = TTN_UPX_EXISTING();
	arr[29] = TTN_UPX_SIGNATURE();
	arr[30] = TTN_UPX_IDENTIFIER();
	arr[31] = TTN_UPX_KIND();
	arr[32] = TTN_UPX_C();
	arr[33] = TTN_UPX_Y();
	arr[34] = TTN_UPX_INFO();
	arr[35] = TTN_UPX_HH_STR();
	arr[36] = TTN_UPX_L();

	return 10;
}

void libCn3q::TwistTheRing(int rotate, unsigned char * Ring)
{
	unsigned char tmp1 = 0;
	unsigned char tmp2 = 0;

	//Вращение кольца n-раз.
	for (int i = 0;i < rotate; i++)
	{
		//Замкнутый сдвиг блока размером 32 бита.
		tmp1 = Ring[31]; //Копирую последний бит который станет первым.
		for (int j = 0; j < 32; j++)
		{
			tmp2 = Ring[j]; //Сохраняю текущее значение бита.
			Ring[j] = tmp1;//Сдвигаю
			tmp1 = tmp2;//Подготавливаю для следующего сдвига.
		}
		
	}
}

int libCn3q::createTriangularNumbers(unsigned int * series, int n)
{
	//Очищаю.
	for (int i = 0;i < n;i++) series[i] = 0;

	unsigned int k = 1;
	unsigned int t = 0;

	for (int i = 0;i < n;i++)
	{
		t= k* (k + 1) / 2;
		series[i] = t;
		k++;
	}
		
	return n;
}


unsigned char libCn3q::getNoLinear1(int a, int b)
{
	unsigned char x = Message[a][b];
	doVal++;
	return x;
}

unsigned char libCn3q::getNoLinear2(int a, int b)
{
	unsigned char x = Hash_512[a][b];
	doVal++;
	return x;
}

unsigned char libCn3q::getNoLinear3(int a, int b)
{
	unsigned char x = Hash_256[a][b];
	doVal++;
	return x;
}

unsigned char libCn3q::rawMultiply(int val)
{
	unsigned char x = MessageLength[val];
	doVal++;
	return x;
}

unsigned char libCn3q::noGhxEnd()
{
	unsigned char trs = TEST_VECTORS;
	doVal++;
	return trs;
}

unsigned char libCn3q::isGdxHandle()
{
	unsigned char trs = MAX_MESSAGE_LENGTH;
	doVal++;
	return trs;
}

void libCn3q::setTpPoint(unsigned int val)
{
	TpPoint = val;
}

void libCn3q::riseEdge()
{
	getNoStatic = true;
}

void libCn3q::litEdge()
{
	getNoStatic = false;
}

unsigned int libCn3q::IMA_MAP_ANPOINT()
{
	unsigned int Y = 11;
	TpPoint = TpPoint + Y;
	return Y;
}

unsigned int libCn3q::IMA_MAP_CURV()
{
	unsigned int Y = 15;
	TpPoint = TpPoint + Y;
	return Y;
}

unsigned int libCn3q::IMA_MAP_EXIT()
{
	unsigned int Y = 3;
	TpPoint = TpPoint + Y;

	return Y;
}

unsigned int libCn3q::IMA_MAP_MUXFIRST()
{
	unsigned int Y = 9;
	TpPoint = TpPoint + Y;

	return Y;
}

unsigned int libCn3q::IMA_MAP_Z_FLAG()
{
	unsigned int Y = 25;
	return Y;
}

unsigned int libCn3q::IMA_MAP_X_FLAG()
{
	unsigned int Y = 136;
	TpPoint = TpPoint + Y;

	return Y;
}

unsigned int libCn3q::IMA_MAP_HANDLE_POINT()
{
	unsigned int Y = 65;
	TpPoint = TpPoint + Y;

	return Y;
}

unsigned int libCn3q::IMA_MAP_SLEW()
{
	unsigned int Y = 26;
	TpPoint = TpPoint + Y;

	return Y;
}

unsigned int libCn3q::IMA_MAP_GEAR_B()
{
	unsigned int Y = 111;
	TpPoint = TpPoint + Y;

	return Y;
}

unsigned int libCn3q::IMA_MAP_DIR_SIGMA()
{
	unsigned int Y = 63;
	TpPoint = TpPoint + Y;

	return Y;
}

unsigned int libCn3q::IMA_MAP_PPS()
{
	unsigned int Y = 17;
	TpPoint = TpPoint + Y;

	return Y;
}

unsigned int libCn3q::TTN_UPX_MASK()
{
	unsigned int Y = 55;
	TpPoint = TpPoint + Y;

	return Y;
}

unsigned int libCn3q::TTN_UPX_SHIFT()
{
	unsigned int Y = 253;
	TpPoint = TpPoint + Y;

	return Y;
}

unsigned int libCn3q::TTN_UPX_ANY()
{
	unsigned int Y = 112;
	TpPoint = TpPoint + Y;

	return Y;
}

unsigned int libCn3q::TTN_UPX_A1_SHIFT()
{
	unsigned int Y = 7;
	TpPoint = TpPoint + Y;

	return Y;
}

unsigned int libCn3q::TTN_UPX_ARP()
{
	unsigned int Y = 96;
	TpPoint = TpPoint + Y;

	return Y;
}

unsigned int libCn3q::TTN_UPX_ATTR()
{
	unsigned int Y = 31;
	TpPoint = TpPoint + Y;

	return Y;
}

unsigned int libCn3q::TTN_UPX_D_HA()
{
	unsigned int Y = 22;
	TpPoint = TpPoint + Y;

	return Y;
}

unsigned int libCn3q::TTN_UPX_PROPERTY()
{
	unsigned int Y = 59;
	TpPoint = TpPoint + Y;

	return Y;
}

unsigned int libCn3q::TTN_UPX_PIC()
{
	unsigned int Y = 80;
	TpPoint = TpPoint + Y;

	if (getNoStatic) return TpPoint;
	return Y;
}

unsigned int libCn3q::TTN_UPX_FREE()
{
	unsigned int Y = 217;
	TpPoint = TpPoint + Y;

	if (getNoStatic) return TpPoint;
	return Y;
}

unsigned int libCn3q::TTN_UPX_STR_A()
{
	unsigned int Y = 92;
	TpPoint = TpPoint + Y;

	if (getNoStatic) return TpPoint;
	return Y;
}

unsigned int libCn3q::TTN_UPX_STR_W()
{
	unsigned int Y = 73;
	TpPoint = TpPoint + Y;

	if (getNoStatic) return TpPoint;
	return Y;
}

unsigned int libCn3q::TTN_UPX_SPEC()
{
	unsigned int Y = 7;
	TpPoint = TpPoint + Y;

	if (getNoStatic) return TpPoint;
	return Y;
}

unsigned int libCn3q::TTN_UPX_USAGE()
{
	unsigned int Y = 85;
	TpPoint = TpPoint + Y;

	if (getNoStatic) return TpPoint;
	return Y;
}

unsigned int libCn3q::TTN_UPX_WARNING()
{
	unsigned int Y = 99;
	TpPoint = TpPoint + Y;

	if (getNoStatic) return TpPoint;
	return Y;
}

unsigned int libCn3q::TTN_UPX_BODY()
{
	unsigned int Y = 9;
	TpPoint = TpPoint + Y;

	if (getNoStatic) return TpPoint;
	return Y;
}

unsigned int libCn3q::TTN_UPX_OFSPACE()
{
	unsigned int Y = 10;
	TpPoint = TpPoint + Y;

	if (getNoStatic) return TpPoint;
	return Y;
}

unsigned int libCn3q::TTN_UPX_EXISTING()
{
	unsigned int Y = 1;
	TpPoint = TpPoint + Y;

	if (getNoStatic) return TpPoint;
	return Y;
}

unsigned int libCn3q::TTN_UPX_SIGNATURE()
{
	unsigned int Y = 220;
	TpPoint = TpPoint + Y;

	if (getNoStatic) return TpPoint;
	return Y;
}

unsigned int libCn3q::TTN_UPX_IDENTIFIER()
{
	unsigned int Y = 201;
	TpPoint = TpPoint + Y;

	if (getNoStatic) return TpPoint;
	return Y;
}

unsigned int libCn3q::TTN_UPX_KIND()
{
	unsigned int Y = 2;
	TpPoint = TpPoint + Y;

	if (getNoStatic) return TpPoint;
	return Y;
}

unsigned int libCn3q::TTN_UPX_C()
{
	unsigned int Y = 136;
	TpPoint = TpPoint + Y;

	if (getNoStatic) return TpPoint;
	return Y;
}

unsigned int libCn3q::TTN_UPX_Y()
{
	unsigned int Y = TTN_UPX_C() + 3;
	TpPoint = TpPoint + Y;

	if (getNoStatic) return TpPoint;
	return Y;
}

unsigned int libCn3q::TTN_UPX_INFO()
{
	unsigned int Y = 3;
	TpPoint = TpPoint + Y;

	if (getNoStatic) return TpPoint;
	return Y;
}

unsigned int libCn3q::TTN_UPX_HH_STR()
{
	unsigned int Y = 13;
	TpPoint = TpPoint + Y;

	if (getNoStatic) return TpPoint;
	return Y;
}

unsigned int libCn3q::TTN_UPX_L()
{
	unsigned int Y = 65;
	TpPoint = TpPoint + Y;

	if (getNoStatic) return TpPoint;
	return Y;
}
